
name: ❄️ Nix CI ❄️

on:
  # This trigger is required by fastapi-mvc automation to dispatch this concrete workflow
  # from fastapi-mvc 'CI workflow' (https://github.com/fastapi-mvc/cookiecutter/actions/workflows/main.yml),
  # and await its result. NOTE! This is not included in the template.
  workflow_dispatch:
    inputs:
      distinct_id:
        required: true
        description: "Input required by codex-/return-dispatch@v1"
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  NIX_CHANNEL: nixpkgs=channel:nixos-22.05

jobs:
  meta:
    runs-on: ubuntu-latest

    steps:
      # This echo is required by codex-/return-dispatch@v1 in order to identify dispatched workflow.
      # NOTE! This is not included in the template.
      - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
        run: echo ${{ github.event.inputs.distinct_id }}
  # This job checks if an identical workflow is being triggered by different
  # event and skips it. For instance there is no need to run the same pipeline
  # twice for pull_request and push for identical commit sha.
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.2.0
        with:
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  nixpkgs-fmt:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: cachix/install-nix-action@v17
        with:
          nix_path: ${{ env.NIX_CHANNEL }}
      - uses: actions/checkout@v3
      - name: Check format
        run: nix-shell -p nixpkgs-fmt --run 'nixpkgs-fmt --check .'
  nix-build:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install Nix ❄️
        uses: cachix/install-nix-action@v17
        with:
          extra_nix_config: "system-features = nixos-test benchmark big-parallel kvm"
          nix_path: ${{ env.NIX_CHANNEL }}
      # Remove bellow step if you do not want to use Cachix - Nix binary cache.
      # For OpenSource projects there is free 5GB of storage.
      # https://www.cachix.org
      - name: Setup Cachix ❄️
        uses: cachix/cachix-action@v12
        with:
          name: fastapi-mvc
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Install make
        run: nix-env -i gnumake -f '<nixpkgs>'
      - name: Build package
        run: make build
      - name: Build container image
        run: make image
  nix-ci:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 'python38', 'python39', 'python310' ]
    env:
      PYTHON_NIXPKG: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v3
      - name: Install Nix
        uses: cachix/install-nix-action@v17
        with:
          nix_path: ${{ env.NIX_CHANNEL }}
      # Remove bellow step if you do not want to use Cachix - Nix binary cache.
      # For OpenSource projects there is free 5GB of storage.
      # https://www.cachix.org
      - name: Setup Cachix Nix cache
        uses: cachix/cachix-action@v12
        with:
          name: fastapi-mvc
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
      - name: Install make
        run: nix-env -i gnumake -f '<nixpkgs>'
      - name: Run metrics checks
        run: make metrics
      - name: Run test
        run: make test
      - name: Run coverage
        run: make coverage