name: CI

on:
  push:
  pull_request:
# This trigger is required by fastapi-mvc automation to dispatch this concrete workflow
# from fastapi-mvc 'CI workflow' (https://github.com/fastapi-mvc/cookiecutter/actions/workflows/main.yml),
# and await its result. By no means should this be included in the template this file was generated from.
# It's just a temporary monkey patch to fulfill the GH automation use case.
# Feel free to remove it.
  workflow_dispatch:
    inputs:
      distinct_id:
        required: true
        description: "Input required by codex-/return-dispatch@v1"

env:
  POETRY_HOME: /opt/poetry
  POETRY_CONFIG_DIR: /opt/poetry
  POETRY_CACHE_DIR: /opt/poetry/cache
  POETRY_VIRTUALENVS_PATH: /opt/poetry/store

jobs:
  # This job checks if an identical workflow is being triggered by different
  # event and skips it. For instance there is no need to run the same pipeline
  # twice for pull_request and push for identical commit sha.
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      # This echo is required by codex-/return-dispatch@v1 in order to identify dispatched workflow.
      # By no means should this be included in the template this file was generated from.
      # It's just a temporary monkey patch to fulfill the GH automation use case.
      # Feel free to remove it.
      - name: echo distinct ID ${{ github.event.inputs.distinct_id }}
        run: echo ${{ github.event.inputs.distinct_id }}
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  install:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Init Poetry cache
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Install package
        run: make install
        if: steps.cached-poetry.outputs.cache-hit != 'true'
  build:
    needs: install
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-3.9-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Build wheel
        run: make build
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ format('fastapi_mvc-{0}', github.sha) }}
          path: dist
          retention-days: 60
  metrics:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Run metrics checks
        run: make metrics
  unit-tests:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Run unit tests
        run: make unit-test
  integration-tests:
    needs: install
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Run integration tests
        run: make integration-test
  coverage:
    needs: install
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Load Poetry cache
        uses: actions/cache@v3
        with:
          path: ${{ env.POETRY_HOME }}
          key: ${{ runner.os }}-3.9-${{ hashFiles('./pyproject.toml') }}-{{ hashFiles('./poetry.lock') }}
      - name: Run coverage
        run: $POETRY_HOME/bin/poetry run pytest --cov=example --cov-fail-under=70 --cov-report=xml --cov-report=term-missing tests